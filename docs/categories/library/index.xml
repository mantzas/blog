<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on Coding Odyssey</title>
    <link>http://blog.mantziaris.eu/categories/library/index.xml</link>
    <description>Recent content in Library on Coding Odyssey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.mantziaris.eu/categories/library/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>New go event sourcing library named incata</title>
      <link>http://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</link>
      <pubDate>Mon, 01 Feb 2016 19:59:22 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</guid>
      <description>

&lt;h1 id=&#34;incata-a-event-sourcing-library-for-go&#34;&gt;incata, a event sourcing library for go&lt;/h1&gt;

&lt;p&gt;Event sourcing is capturing all changes of an application state as a sequence of events.
Since we only store events we only have to add events to a store, in contrast to updates for keeping the application state.
A much simpler model that scales very well. When needing the application state we just aggregate the events into&lt;/p&gt;

&lt;p&gt;More on this can be read all over the internet but two excellent links are available below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/eaaDev/EventSourcing.html&#34;&gt;Martin Fowler Event Sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.geteventstore.com/introduction/event-sourcing-basics/&#34;&gt;Event Sourcing Basics by Event Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The library has support for the following RDBMS&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft SQL Server&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mantzas/incata&#34;&gt;incata&lt;/a&gt; is very easy to setup and to use like illustrated on the github page.
Any ideas or improvements are highly welcome. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initial release of adaptlog</title>
      <link>http://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</link>
      <pubDate>Wed, 20 Jan 2016 00:44:10 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</guid>
      <description>

&lt;h1 id=&#34;adaptlog-a-logging-abstraction-for-go&#34;&gt;adaptlog, a logging abstraction for go&lt;/h1&gt;

&lt;p&gt;Almost every application logs data one way or another. There are a plethora of logging packages available for &lt;a href=&#34;https://golang.org/&#34;&gt;golang&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is the one that comes with the standard packages which takes a simple approach.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;There are many logging packages that follow the well established leveled approach, and there are really a lot of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The decision of choosing a specific library comes with the cost of a direct dependency.
But why should we depend directly on a specific package?
How painful is it to exchange a logging package for another when we already created a lot of code with a direct dependency?&lt;br /&gt;
This is the reason why &lt;a href=&#34;https://github.com/mantzas/adaptlog&#34;&gt;apaptlog&lt;/a&gt; came to life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mantzas/adaptlog&#34;&gt;apaptlog&lt;/a&gt; is just a logging abstraction, which itself does not implement any log related stuff.
A logger has to be provided by the developer using any of the previous mentioned logging packages or any custom implementation.
The developer has to implement only a logging interface (standard or leveled), configure it at application start and use the abstraction throughout the code.
This is hardly something new. There are many libraries in other languages that do exactly this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mantzas/adaptlog&#34;&gt;apaptlog&lt;/a&gt; is very easy to setup and to use. Follow the sample for the standard logger implementation.
Any ideas or improvements are highly welcome. Enjoy!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>