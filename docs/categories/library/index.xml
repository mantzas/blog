<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on Coding Odyssey</title>
    <link>https://blog.mantziaris.eu/categories/library/</link>
    <description>Recent content in Library on Coding Odyssey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Feb 2016 19:59:22 +0200</lastBuildDate>
    
	<atom:link href="https://blog.mantziaris.eu/categories/library/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>New go event sourcing library named incata</title>
      <link>https://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</link>
      <pubDate>Mon, 01 Feb 2016 19:59:22 +0200</pubDate>
      
      <guid>https://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</guid>
      <description>incata, a event sourcing library for go Event sourcing is capturing all changes of an application state as a sequence of events. Since we only store events we only have to add events to a store, in contrast to updates for keeping the application state. A much simpler model that scales very well. When needing the application state we just aggregate the events into
More on this can be read all over the internet but two excellent links are available below:</description>
    </item>
    
    <item>
      <title>Initial release of adaptlog</title>
      <link>https://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</link>
      <pubDate>Wed, 20 Jan 2016 00:44:10 +0200</pubDate>
      
      <guid>https://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</guid>
      <description>adaptlog, a logging abstraction for go Almost every application logs data one way or another. There are a plethora of logging packages available for golang.
 There is the one that comes with the standard packages which takes a simple approach.
 There are many logging packages that follow the well established leveled approach, and there are really a lot of them.  The decision of choosing a specific library comes with the cost of a direct dependency.</description>
    </item>
    
  </channel>
</rss>