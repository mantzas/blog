<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Odyssey</title>
    <link>http://blog.mantziaris.eu/index.xml</link>
    <description>Recent content on Coding Odyssey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jan 2017 13:11:25 +0200</lastBuildDate>
    <atom:link href="http://blog.mantziaris.eu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tripping the circuit</title>
      <link>http://blog.mantziaris.eu/blog/2017/01/06/tripping-the-circuit/</link>
      <pubDate>Fri, 06 Jan 2017 13:11:25 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2017/01/06/tripping-the-circuit/</guid>
      <description>

&lt;h1 id=&#34;circuit-breaker-pattern&#34;&gt;Circuit breaker pattern&lt;/h1&gt;

&lt;p&gt;This is probably one of the most useful &amp;ldquo;cloud&amp;rdquo; patterns out there and it is fairly easy to implement.&lt;br /&gt;
There are great articles and implementations, like &lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt;,
already on the internet about this pattern so why another one?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Κρείττον οψιμαθή είναι ή αμαθή.&lt;br /&gt;
Socrates 469-399 BC., Philosopher&lt;/p&gt;

&lt;p&gt;Better too have learned lately than never, as he tried to explain why he learned to play
guitar in his old age.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have learned better by reading, implementing and writing about something so stick with me.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;Almost every application communicate with other services or resources, and they fail&amp;hellip;&lt;/p&gt;

&lt;p&gt;The reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;slow network connections&lt;/li&gt;
&lt;li&gt;timeouts&lt;/li&gt;
&lt;li&gt;the resources being over-committed or temporarily unavailable&lt;/li&gt;
&lt;li&gt;buggy release&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When this happen our system becomes unstable, unreliable, brittle and failures cascade.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go with an example of a failing remote service, let&amp;rsquo;s say we have the following scenario&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the remote service times out after 60sec&lt;/li&gt;
&lt;li&gt;our service gets 30 req/s&lt;/li&gt;
&lt;li&gt;the usual response time is 1s&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;each request takes up 1MB of RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens in our application?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The current request takes up resources in order to make the call and blocks (or awaits) for 60sec&lt;/li&gt;
&lt;li&gt;All requests for the same service will suffer the same fate&lt;/li&gt;
&lt;li&gt;Almost 1800 requests will be waiting for response at the end of the first 60s&lt;/li&gt;
&lt;li&gt;Almost 1800MB of RAM is used up at the end of the first 60s&lt;/li&gt;
&lt;li&gt;All clients that call our service fail in the same way&lt;/li&gt;
&lt;li&gt;The failure cascades&lt;/li&gt;
&lt;li&gt;The response times go through the roof and will be 60s for each request due to the timeout&lt;/li&gt;
&lt;li&gt;The SLA, we might have, will be breached&lt;/li&gt;
&lt;li&gt;The perfect storm is about to form&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is a simplified example but is not that far fetched.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Using a circuit breaker can improve the stability and resilience of our application.
The circuit is actually a state machine with 3 states&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Closed, meaning the execution will proceed&lt;/li&gt;
&lt;li&gt;Open, meaning the execution will not proceed and throw a exception or return an error (implementation specific)&lt;/li&gt;
&lt;li&gt;Half-Open, meaning that some executions are allowed after some time in order to check the remote service
and open or close the circuit based on the response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For deeper knowledge on the pattern please read the following excellent articles&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dn589784.aspx&#34;&gt;MSDN Circuit Breaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/bliki/CircuitBreaker.html&#34;&gt;Martin Fowler Circuit Breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;By using a circuit breaker we have the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fail in a controlled manner&lt;/li&gt;
&lt;li&gt;Fail fast&lt;/li&gt;
&lt;li&gt;Save server resources&lt;/li&gt;
&lt;li&gt;Maintain response times (SLA)&lt;/li&gt;
&lt;li&gt;Handle failures differently when the circuit opens eg

&lt;ul&gt;
&lt;li&gt;Redirect to another resources&lt;/li&gt;
&lt;li&gt;Save for later retry&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;There are two implementation of the circuit breaker.
They share the same philosophy but are written in C# and Go.
Both implementations have a setting provider interface which can be implemented
in order to get the settings from anywhere. There is a in-memory settings implementation which
holds the settings in memory.
Both implementation are key based which means that for every key
the implementation provides a separate circuit which is actually the state.
The following setting exist for each key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Failure Threshold at which the circuit opens&lt;/li&gt;
&lt;li&gt;Retry Timeout defines after how much time after the circuit trips will the state be half-open&lt;/li&gt;
&lt;li&gt;Retry Success Threshold defines after how many successful retries will the circuit reset and Closed&lt;/li&gt;
&lt;li&gt;Max Retry Execution Threshold defines how many retries are allowed in the half-open state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The C# implementation can be found @ &lt;a href=&#34;https://github.com/mantzas/clouddotnet&#34;&gt;clouddotnet&lt;/a&gt;.
The implementation is generic, asynchronous and thread safe.&lt;br /&gt;
The Go implementation can be found @ &lt;a href=&#34;https://github.com/mantzas/gocloud&#34;&gt;gocloud&lt;/a&gt;.
The implementation is idiomatic and &amp;ldquo;goroutine&amp;rdquo; safe.&lt;/p&gt;

&lt;h2 id=&#34;diffs&#34;&gt;Diffs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Since Go does not have generics the action to be executed returns a interface and a error
so type casting is necessary&lt;/li&gt;
&lt;li&gt;The benchmark for the C# implementation results in 355ns/op Windows, 529ns/op Linux&lt;/li&gt;
&lt;li&gt;The benchmark for the Go implementation results in 562ns/operation Windows, 558 ns/operation Linux&lt;/li&gt;
&lt;li&gt;C# is a lot faster than Go for this implementation on Windows which maybe expected&lt;/li&gt;
&lt;li&gt;C# is on par with Go on Linux which is impressive&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;My &lt;a href=&#34;http://github.com/mantzas/blog&#34;&gt;blog&lt;/a&gt; is hosted in github so for any change, improvement or fix
you can either open a issue or submit a pull request.&lt;br /&gt;
The same goes for both implementations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dotNETZone.gr meetup .NET core presentation</title>
      <link>http://blog.mantziaris.eu/blog/2016/11/24/dotnetzone.gr-meetup-.net-core-presentation/</link>
      <pubDate>Thu, 24 Nov 2016 08:11:25 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/11/24/dotnetzone.gr-meetup-.net-core-presentation/</guid>
      <description>&lt;p&gt;The presentation was about the current state of .NET Core in the Linux World.
Here are &lt;a href=&#34;http://go-talks.appspot.com/github.com/mantzas/presentations/20161106_shaken_to_the_dotnet_core/shaken_to_the_dotnet_core.slide#1&#34;&gt;the slides&lt;/a&gt; of the presentation
and the &lt;a href=&#34;https://github.com/mantzas/presentations/tree/master/20161106_shaken_to_the_dotnet_core&#34;&gt;github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for attending.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Repository and Unit of Work pattern</title>
      <link>http://blog.mantziaris.eu/blog/2016/10/24/the-repository-and-unit-of-work-pattern/</link>
      <pubDate>Mon, 24 Oct 2016 22:30:54 +0300</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/10/24/the-repository-and-unit-of-work-pattern/</guid>
      <description>

&lt;p&gt;Yes, i know not this again. Is this not the one millionth time that someone blogs about that?
Yes, yes and yes but…
It is always good to repeat things and we all know that&lt;/p&gt;

&lt;p&gt;“Repetition is the mother of learning, the father of action, which makes it the architect of accomplishment.” ― &lt;a href=&#34;https://en.wikipedia.org/wiki/Zig_Ziglar&#34;&gt;Zig Ziglar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are still implementations out there that might benefit from this…&lt;/p&gt;

&lt;p&gt;So let’s start with some definitions.&lt;/p&gt;

&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;

&lt;p&gt;Quoting &lt;a href=&#34;http://martinfowler.com/eaaCatalog/repository.html&#34;&gt;Martin Fowler’s Definition&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;A system with a complex domain model often benefits from a layer, such as the one provided by Data Mapper (165),
that isolates domain objects from details of the database access code. In such systems it can be worthwhile to build another layer of abstraction
over the mapping layer where query construction code is concentrated. This becomes more important when there are a large number of domain classes or heavy querying.
In these cases particularly, adding this layer helps minimize duplicate query logic. A Repository mediates between the domain and data mapping layers,
acting like an in-memory domain object collection. Client objects construct query specifications declaratively and submit them to Repository for satisfaction.
Objects can be added to and removed from the Repository, as they can from a simple collection of objects, and the mapping code encapsulated by the Repository
will carry out the appropriate operations behind the scenes. Conceptually, a Repository encapsulates the set of objects persisted in a data store and the operations
performed over them, providing a more object-oriented view of the persistence layer. Repository also supports the objective of achieving a clean separation and
one-way dependency between the domain and data mapping layers.&lt;/p&gt;

&lt;p&gt;Reading different sources (&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff649690.aspx&#34;&gt;MSDN The Repository Pattern&lt;/a&gt;,
&lt;a href=&#34;http://martinfowler.com/eaaCatalog/repository.html&#34;&gt;Martin Fowler: Repository&lt;/a&gt; etc) about the repository pattern the following properties emerge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It maps between Domain Objects and Data objects&lt;/li&gt;
&lt;li&gt;It does not expose the data layer to the outside world&lt;/li&gt;
&lt;li&gt;It consolidates all data access patterns in one place thus help with code deduplication&lt;/li&gt;
&lt;li&gt;It has a single responsibility&lt;/li&gt;
&lt;li&gt;It is simple to implement&lt;/li&gt;
&lt;li&gt;It has a one way dependency between the domain and the data layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A simple example is the following application repository(C#):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IApplicationRepository
{
    Task DeleteAsync(int id);
    Task&amp;lt;ApplicationModel&amp;gt; GetAsync(int id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By providing an interface we can leave the implementation up top the developer to choose the data access library they wish.
The argument and return values of this interface should be domain specific objects and not the data objects to avoid spilling the data
into other layers and have a clean separation.&lt;/p&gt;

&lt;p&gt;By using the above i had the chance to change the underlying implementation with anything i wished to experimented with.
First everything was EF, then Simple.Data then Dapper etc. You could even mix and match any of the above since every implementation
in the end will use a SqlConnection. It is really easy to change the underlying implementation.&lt;/p&gt;

&lt;p&gt;You may think that changing the implementation happens not that often (migrate from EF to Dapper or from nHibernate to EF or Dapper etc)
but it can happen and is a really cheap abstraction over your data layer implementation. It further promotes clean separation which is always something worth doing.
This allows the application to not depend directly on the data access library and allows for future change with little cost.
For example if you have a application that uses nHibernate, which was maybe a good choice in the past, you are missing out some things
that other ORM provide like async calls or even the new .Net Core which may or may not happen for nHibernate. Dapper and EF already have the above.&lt;/p&gt;

&lt;p&gt;The implementation of the interface does need something in order to work with the data layer. This can be a SqlConnection, DbContext (EF), Session (NHibernate) etc.
This will be injected to each repository and will generally be implemented in the Unit of Work.&lt;/p&gt;

&lt;h2 id=&#34;unit-of-work&#34;&gt;Unit of Work&lt;/h2&gt;

&lt;p&gt;Quoting &lt;a href=&#34;http://martinfowler.com/eaaCatalog/unitOfWork.html&#34;&gt;Martin Fowler&amp;rsquo;s Definition&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;A Unit of Work keeps track of everything you do during a business transaction that can affect the database.
When you&amp;rsquo;re done, it figures out everything that needs to be done to alter the database as a result of your work.&lt;/p&gt;

&lt;p&gt;So the UoW (Unit of Work) is responsible for keeping the db object (SqlConnection, DbContext) and handling the final commit in order to persist everything to DB.&lt;/p&gt;

&lt;p&gt;A simple interface (C#) that has to be implemented is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IUnitOfWork : IDisposable
{
    IApplicationRepository Applications { get; }
    Task CommitAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just a wrapper around our db object (SqlConnection, DbContext etc) and the implementation of the commit.
When we have a UoW we have at our hands all the necessary repositories, so interacting with them is really easy.&lt;/p&gt;

&lt;h2 id=&#34;ef-baked-implementation-and-usage&#34;&gt;EF baked implementation and usage&lt;/h2&gt;

&lt;p&gt;Now we have the the following implementation for the application repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ApplicationRepository : IDataAccess&amp;lt;ApplicationDbModel&amp;gt;, 
                                     IApplicationRepository
{
    public ApplicationRepository(DbContext dbContext, IMapper mapper) : 
        base(dbContext, mapper)
    {
    }

    public Task DeleteAsync(int id) =&amp;gt; base.DeleteAsync(id);

    public async Task&amp;lt;ApplicationModel&amp;gt; GetAsync(int id)
    {
            var application = await GetAll()
                        .Where(p =&amp;gt; p.Id == id)
                        .SingleOrDefaultAsync();
            return mapper&amp;lt;ApplicationModel&amp;gt;(application);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the base repository is a EF implementation of the following interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IDataAccess&amp;lt;T&amp;gt; where T : class
{
    IQueryable&amp;lt;T&amp;gt; GetAll();
    Task&amp;lt;T&amp;gt; GetByIdAsync(params object[] keyValues);
    void Add(T entity);
    void Update(T entity);
    void Delete(T entity);
    Task DeleteAsync(params object[] keyValues);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is fairly easy to implementing another data access library. A dapper implementation of the application repository has
as constructor parameter a SqlConnection and the actual implementation of the interface methods. That’s it.&lt;/p&gt;

&lt;p&gt;The unit of work implementation is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class UnitOfWork : IUnitOfWork
{
    private readonly IMapper _mapper;
    private DbContext _dbContext;

    public UnitOfWork(DbContext dbContext, IMapper mapper)
    {
        _dbContext= dbContext;
        _mapper = mapper;
    }

    public Task&amp;lt;int&amp;gt; CommitAsync()
    {
        return _dbContext.SaveChangesAsync();
    }

    public IApplicationRepository Applications =&amp;gt; 
        new ApplicationRepository(_dbContext, _mapper);

    //Implement IDisposable
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a simple implementation of the UoW. Do not mind that some features are missing like transaction handling
(DbContext.Database.BeginTransaction() and then commit or rollback) a repository factory etc which are fairly easy to implement.&lt;/p&gt;

&lt;p&gt;And how is this used?&lt;/p&gt;

&lt;p&gt;Let’s assume we have a Unit Of Work Factory implemented so the code would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var uow = _unitOfWorkFactory.Create())
{
    var application = await uow.Applications.GetAsync(1, 1);
    await uow.Applications.DeleteAsync(application.Id);
    await uow.CommitAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy and clean, isn’t it? Everything is in one place, at the end it get’s committed and properly disposed.
Since EF exposes the connection through the DbContext we can actually use Dapper also and have a mixed data access layer repository
in order to handle some hotspots where EF does not play well.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The repository and the unit of work patterns are fairly easy to implement. They provide a proper data access abstraction and expose only the needed domain object
and do not spill the data object into the upper layers. The only thing needed in order to use this is to inject the unit of work factory and we have our db in our hand.
Hope this is helpful. Any comment, discussion or fix is highly welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>To TAP or not to TAP</title>
      <link>http://blog.mantziaris.eu/blog/2016/05/25/to-tap-or-not-to-tap/</link>
      <pubDate>Wed, 25 May 2016 21:35:00 +0300</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/05/25/to-tap-or-not-to-tap/</guid>
      <description>

&lt;h1 id=&#34;tt-tt&#34;&gt;TT || !TT&lt;/h1&gt;

&lt;p&gt;Ramblings on Tasks, async-await and ASP.NET. The &lt;a href=&#34;https://goo.gl/sO3ZGv&#34;&gt;slides&lt;/a&gt; from the &lt;a href=&#34;http://www.meetup.com/DotNetZone/events/231198572/&#34;&gt;meetup&lt;/a&gt;
 do contain common issues encountered when working with TPL, async-await and ASP.NET along with some good practices. These are off course not all. Please let me know if you have any suggestions. Thanks for attenting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New go event sourcing library named incata</title>
      <link>http://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</link>
      <pubDate>Mon, 01 Feb 2016 19:59:22 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</guid>
      <description>

&lt;h1 id=&#34;incata-a-event-sourcing-library-for-go&#34;&gt;incata, a event sourcing library for go&lt;/h1&gt;

&lt;p&gt;Event sourcing is capturing all changes of an application state as a sequence of events.
Since we only store events we only have to add events to a store, in contrast to updates for keeping the application state.
A much simpler model that scales very well. When needing the application state we just aggregate the events into&lt;/p&gt;

&lt;p&gt;More on this can be read all over the internet but two excellent links are available below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/eaaDev/EventSourcing.html&#34;&gt;Martin Fowler Event Sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.geteventstore.com/introduction/event-sourcing-basics/&#34;&gt;Event Sourcing Basics by Event Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The library has support for the following RDBMS&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft SQL Server&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mantzas/incata&#34;&gt;incata&lt;/a&gt; is very easy to setup and to use like illustrated on the github page.
Any ideas or improvements are highly welcome. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initial release of adaptlog</title>
      <link>http://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</link>
      <pubDate>Wed, 20 Jan 2016 00:44:10 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</guid>
      <description>

&lt;h1 id=&#34;adaptlog-a-logging-abstraction-for-go&#34;&gt;adaptlog, a logging abstraction for go&lt;/h1&gt;

&lt;p&gt;Almost every application logs data one way or another. There are a plethora of logging packages available for &lt;a href=&#34;https://golang.org/&#34;&gt;golang&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is the one that comes with the standard packages which takes a simple approach.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;There are many logging packages that follow the well established leveled approach, and there are really a lot of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The decision of choosing a specific library comes with the cost of a direct dependency.
But why should we depend directly on a specific package?
How painful is it to exchange a logging package for another when we already created a lot of code with a direct dependency?&lt;br /&gt;
This is the reason why &lt;a href=&#34;https://github.com/mantzas/adaptlog&#34;&gt;apaptlog&lt;/a&gt; came to life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mantzas/adaptlog&#34;&gt;apaptlog&lt;/a&gt; is just a logging abstraction, which itself does not implement any log related stuff.
A logger has to be provided by the developer using any of the previous mentioned logging packages or any custom implementation.
The developer has to implement only a logging interface (standard or leveled), configure it at application start and use the abstraction throughout the code.
This is hardly something new. There are many libraries in other languages that do exactly this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mantzas/adaptlog&#34;&gt;apaptlog&lt;/a&gt; is very easy to setup and to use. Follow the sample for the standard logger implementation.
Any ideas or improvements are highly welcome. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup a blog with Hugo and Github Pages</title>
      <link>http://blog.mantziaris.eu/blog/2015/11/07/setup-a-blog-with-hugo-and-github-pages/</link>
      <pubDate>Sat, 07 Nov 2015 13:42:43 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2015/11/07/setup-a-blog-with-hugo-and-github-pages/</guid>
      <description>

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;It was long my desire to write a blog with stuff that interests me.&lt;br /&gt;
Lately i was studying &lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt; and i came across &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; which is a really nice and fast site generation utility.&lt;br /&gt;
This was a great opportunity to start my own blog by using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; in order to host it. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s free&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s easy and fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a walk through on how you can have a blog easy, fast and free! Let&amp;rsquo;s start! The only thing you need is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Github Account&lt;/li&gt;
&lt;li&gt;a Domain (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;steps&#34;&gt;Steps&lt;/h3&gt;

&lt;p&gt;The following steps are needed for the initial setup and creation of the blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; repository for source code of the blog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; repository for the generated site&lt;/li&gt;
&lt;li&gt;Setup &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create blog&lt;/li&gt;
&lt;li&gt;Publish blog to &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate content and publish&lt;/li&gt;
&lt;li&gt;(Optional) Setup sub domain to point to blog&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-github-https-github-com-repository-for-source-code-of-the-blog&#34;&gt;1. &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; repository for source code of the blog&lt;/h3&gt;

&lt;p&gt;Create a repository (public or private).&lt;/p&gt;

&lt;h3 id=&#34;2-github-pages-https-pages-github-com-repository-for-the-generated-site&#34;&gt;2. &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; repository for the generated site&lt;/h3&gt;

&lt;p&gt;Follow the instruction on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; to create a repository with your Github username. Clone it to your local drive.&lt;/p&gt;

&lt;h3 id=&#34;3-setup-hugo-https-gohugo-io&#34;&gt;3. Setup &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Download &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to your local drive. Unpack it to a folder and set the path in your OS to the executable. Almost all OS are supported!!!&lt;/p&gt;

&lt;h3 id=&#34;4-create-blog&#34;&gt;4. Create blog&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a folder for your blog source code and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;hugo new site .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add as remote repository the repository created in Step 1. (&lt;code&gt;git remote add origin https://github.com/{username}/{repository}.git&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;.gitignore&lt;/code&gt; file to exclude the path &lt;code&gt;public/&lt;/code&gt;, which is the default directory of the generated static files&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git commit -m &amp;quot;initial commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please refer to &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&amp;rsquo;s&lt;/a&gt; documentation for generating content, using themes etc.&lt;/p&gt;

&lt;h3 id=&#34;5-publish-blog-to-github-pages-https-pages-github-com&#34;&gt;5. Publish blog to &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When we are ready to deploy our blog we do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute &lt;code&gt;hugo -d {path}&lt;/code&gt;, where path is the cloned repository path from step 2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the above path&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git commit -m &amp;quot;initial commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this we can enjoy our newly created blog under &lt;code&gt;http://{username}.github.io&lt;/code&gt; where username should be replaced with your &lt;a href=&#34;https://github.com/&#34;&gt;Github&amp;rsquo;s&lt;/a&gt; username.&lt;/p&gt;

&lt;h3 id=&#34;6-generate-content-and-publish&#34;&gt;6. Generate content and publish&lt;/h3&gt;

&lt;p&gt;After our initial commit we can now generate more content and publish it (Step 5).&lt;/p&gt;

&lt;h3 id=&#34;7-optional-setup-sub-domain-to-point-to-blog&#34;&gt;7. (Optional) Setup sub domain to point to blog&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s assume you have a sub domain &lt;code&gt;blog.domain.com&lt;/code&gt;. The only thing you need to do is to setup a CNAME entry in your DNS configuration and point it to &lt;code&gt;{username}.github.io&lt;/code&gt;, add a file with name &lt;code&gt;CNAME&lt;/code&gt; and content &lt;code&gt;blog.domain.com&lt;/code&gt; to the root folder of the repository created in step 2, commit and you&amp;rsquo;re done.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With these six (the seventh is optional) easy steps we have created a fully functional and fast blog. The cherry on top: &lt;strong&gt;for free!!!&lt;/strong&gt;&lt;br /&gt;
(If we used public repositories in &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;). And if we assume that almost everybody nowadays has a domain it is free even with the 7th step!&lt;/p&gt;

&lt;p&gt;Happy blogging!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://blog.mantziaris.eu/license/</link>
      <pubDate>Sat, 07 Nov 2015 01:43:37 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/license/</guid>
      <description>

&lt;h3 id=&#34;content-license&#34;&gt;Content license&lt;/h3&gt;

&lt;p&gt;&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;span xmlns:dct=&#34;http://purl.org/dc/terms/&#34; property=&#34;dct:title&#34;&gt;mantzas blog&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://blog.mantziaris.eu&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Sotirios Mantziaris&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-license&#34;&gt;Code license&lt;/h3&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Copyright 2015-2016 Sotirios Mantziaris

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://blog.mantziaris.eu/about/</link>
      <pubDate>Fri, 06 Nov 2015 01:05:42 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/about/</guid>
      <description>&lt;p&gt;My name is Sotirios Mantziaris (Greek: Σωτήρης Μαντζιάρης).&lt;br /&gt;
I am a software engineer and live and work in Athens, Greece.&lt;/p&gt;

&lt;p&gt;I use mostly the Microsoft .Net Framework Stack but i am exploring everything interesting like &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; lately.&lt;br /&gt;
I consider myself mostly a back-end engineer, but i had my fair share of front end development in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows Desktop (WinForms, WPF)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Web

&lt;ul&gt;
&lt;li&gt;Server Side (&lt;a href=&#34;http://www.asp.net/web-forms&#34;&gt;Asp.NET WebForms&lt;/a&gt;, &lt;a href=&#34;http://www.asp.net/mvc&#34;&gt;Asp.NET MVC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Client Side (&lt;a href=&#34;http://durandaljs.com/&#34;&gt;Durandal&lt;/a&gt;, &lt;a href=&#34;https://angularjs.org/&#34;&gt;Angular&lt;/a&gt;, &lt;a href=&#34;http://aurelia.io/&#34;&gt;Aurelia&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details about my background and how to get in contact with me check out (or with one of the nice looking icons on the left)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gr.linkedin.com/in/sotirismantziaris&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xing.com/profile/Sotirios_Mantziaris&#34;&gt;Xing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mantzas&#34;&gt;GitHub page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/users/182740/mantzas&#34;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>