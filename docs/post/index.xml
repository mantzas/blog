<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Coding Odyssey</title>
    <link>http://blog.mantziaris.eu/post/</link>
    <description>Recent content in Posts on Coding Odyssey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Jul 2017 07:36:33 +0300</lastBuildDate>
    
	<atom:link href="http://blog.mantziaris.eu/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NET Benchmarks</title>
      <link>http://blog.mantziaris.eu/blog/2017/07/11/net-benchmarks/</link>
      <pubDate>Tue, 11 Jul 2017 07:36:33 +0300</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2017/07/11/net-benchmarks/</guid>
      <description>.NET Benchmarks A lot of times i was wondering what is the best performing code. In order to determine that i had to benchmark my code, but benchmarks are hard to write. Luckily there is a open source project that does this work perfectly good and very easy.
The name of the library is BenchmarkDotNet and the documentation can be found here. The only thing you have to do is:</description>
    </item>
    
    <item>
      <title>Tripping the circuit</title>
      <link>http://blog.mantziaris.eu/blog/2017/01/06/tripping-the-circuit/</link>
      <pubDate>Fri, 06 Jan 2017 13:11:25 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2017/01/06/tripping-the-circuit/</guid>
      <description>Circuit breaker pattern This is probably one of the most useful &amp;ldquo;cloud&amp;rdquo; patterns out there and it is fairly easy to implement.
There are great articles and implementations, like Polly, already on the internet about this pattern so why another one?
 Κρείττον οψιμαθή είναι ή αμαθή.
Socrates 469-399 BC., Philosopher
Better too have learned lately than never, as he tried to explain why he learned to play guitar in his old age.</description>
    </item>
    
    <item>
      <title>dotNETZone.gr meetup .NET core presentation</title>
      <link>http://blog.mantziaris.eu/blog/2016/11/24/dotnetzone.gr-meetup-.net-core-presentation/</link>
      <pubDate>Thu, 24 Nov 2016 08:11:25 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/11/24/dotnetzone.gr-meetup-.net-core-presentation/</guid>
      <description>The presentation was about the current state of .NET Core in the Linux World. Here are the slides of the presentation and the github repository.
Thanks for attending.</description>
    </item>
    
    <item>
      <title>The Repository and Unit of Work pattern</title>
      <link>http://blog.mantziaris.eu/blog/2016/10/24/the-repository-and-unit-of-work-pattern/</link>
      <pubDate>Mon, 24 Oct 2016 22:30:54 +0300</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/10/24/the-repository-and-unit-of-work-pattern/</guid>
      <description>Yes, i know not this again. Is this not the one millionth time that someone blogs about that? Yes, yes and yes but… It is always good to repeat things and we all know that
“Repetition is the mother of learning, the father of action, which makes it the architect of accomplishment.” ― Zig Ziglar
There are still implementations out there that might benefit from this…
So let’s start with some definitions.</description>
    </item>
    
    <item>
      <title>To TAP or not to TAP</title>
      <link>http://blog.mantziaris.eu/blog/2016/05/25/to-tap-or-not-to-tap/</link>
      <pubDate>Wed, 25 May 2016 21:35:00 +0300</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/05/25/to-tap-or-not-to-tap/</guid>
      <description>TT || !TT Ramblings on Tasks, async-await and ASP.NET. The slides from the meetup do contain common issues encountered when working with TPL, async-await and ASP.NET along with some good practices. These are off course not all. Please let me know if you have any suggestions. Thanks for attenting.</description>
    </item>
    
    <item>
      <title>New go event sourcing library named incata</title>
      <link>http://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</link>
      <pubDate>Mon, 01 Feb 2016 19:59:22 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/02/01/new-go-event-sourcing-library-named-incata/</guid>
      <description>incata, a event sourcing library for go Event sourcing is capturing all changes of an application state as a sequence of events. Since we only store events we only have to add events to a store, in contrast to updates for keeping the application state. A much simpler model that scales very well. When needing the application state we just aggregate the events into
More on this can be read all over the internet but two excellent links are available below:</description>
    </item>
    
    <item>
      <title>Initial release of adaptlog</title>
      <link>http://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</link>
      <pubDate>Wed, 20 Jan 2016 00:44:10 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2016/01/20/initial-release-of-adaptlog/</guid>
      <description>adaptlog, a logging abstraction for go Almost every application logs data one way or another. There are a plethora of logging packages available for golang.
 There is the one that comes with the standard packages which takes a simple approach.
 There are many logging packages that follow the well established leveled approach, and there are really a lot of them.  The decision of choosing a specific library comes with the cost of a direct dependency.</description>
    </item>
    
    <item>
      <title>Setup a blog with Hugo and Github Pages</title>
      <link>http://blog.mantziaris.eu/blog/2015/11/07/setup-a-blog-with-hugo-and-github-pages/</link>
      <pubDate>Sat, 07 Nov 2015 13:42:43 +0200</pubDate>
      
      <guid>http://blog.mantziaris.eu/blog/2015/11/07/setup-a-blog-with-hugo-and-github-pages/</guid>
      <description>Intro It was long my desire to write a blog with stuff that interests me.
Lately i was studying Golang and i came across Hugo which is a really nice and fast site generation utility.
This was a great opportunity to start my own blog by using Hugo and Github Pages in order to host it. Why?
 it&amp;rsquo;s free it&amp;rsquo;s Github it&amp;rsquo;s easy and fast  This is a walk through on how you can have a blog easy, fast and free!</description>
    </item>
    
  </channel>
</rss>